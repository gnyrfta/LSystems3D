This program generates Lindenmeyer systems, also called L-Systems, in three dimensions.
An L-System is defined by:
* A starting pattern. 
* Replacement rules for the different symbols in the pattern.
* Interpretation of the different symbols. 
A mathematician might complain about the above definition.
In this program, the symbols have these meanings:

F = Move forward, draw a line of length 'd'. 
+ = turn left an angle alpha.
- = turn right an angle alpha.
^ = pitch up an angle delta.
& = pitch down an angle delta.
* = roll left.
/ = roll right.
| = turn 180 degrees.

For branching structures these symbols are often used:
[ = store current position and direction.
] = go to latest stored position and direction.
Unfortunately these last two symbols do not work in the program yet, there seems to be a stack.push() and a stack.pop() function in the cheloniidae package, but it hasn't worked for me yet. Therefore implementation of these symbols is not part of LSystem3D.

All other symbols, such as X or Y, have no interpretation and exist only to control the way the array grows.

The user chooses starting pattern, the angle alpha and the amount of iterations. 
After the array has been generated by applying the rules the specified amount of times, a TURTLE interprets 
the resulting array. The turtle changes direction and position as it encounters the different symbols in the array, drawing a line in its wake which produces a pattern. 

Some examples of L-Systems include the Koch Snowflake, the Sierpinski triangle but also patterns that form images and shapes that look very much like some plants! For more info on this visit the wiki page: http://en.wikipedia.org/wiki/L-system. All of these have 3D - forms, but the only replacement rules I have found for 3D -L systems so far is for 
the Hilbert curve in 3D. This is the default that is preset when the program is started. 

This package contains the following classes:
* LSystem3D - Contains the method pattern which takes starting pattern, deviation angle, replacement rules and amount of iterations and returns the resulting array.
* LSystemGUI - Draws up the GUI that allows the user to specify starting pattern, replacement rules and deviation angle.
Contains the main function.
* LSystem3DDraw - Uses classes from the cheloniidae package (TurtleWindow and StandardRotationalTurtle) to control the turtles movement in 3 dimensions and draw the line trailing it that gives us a pattern.  
* IntegerField - A Textfield for integers written by Colin Bell.
The Cheloniidae package is released under an MIT License. It's a great program! There is not so much documentation too it yet, though. A good continuation of the 3D-program would be adding leaf structure possibilities to it, as described in Aristid Lindenmeyer & Co's great book "The Algorithmic beauty of Plants". In order to do this, it is necessary that the stack.pop() and stack.push() functions are correctly implemented, otherwise the turtle can't make branching structures.

If you like this package and/or have use for it - please fork it or use as is! 
This program is not bug-free. The drawing generally works, but there are errors reported in the console. 
For 5 iterations using the Hilbert Curve, my notebook requires at least a minute to generate the image.
The amount of drawing often increases exponentially, so make sure you can kill the program in case you input too high iteration number for the LSystem you want to generate.



